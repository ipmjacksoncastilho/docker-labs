# =========================================================================================
#                          ModSecurity Configuration Documentation
# =========================================================================================
# This configuration file provides recommended default settings for the ModSecurity web
# application firewall. These rules are designed to manage how ModSecurity interacts with 
# HTTP requests and responses, handles audit logging, and processes security policies.
# =========================================================================================

# =========================================================================================
# 1. Core ModSecurity Settings
# =========================================================================================

# Enables or disables ModSecurity. 
# Options:
#   - On: ModSecurity is active and processes requests according to the rules.
#   - Off: ModSecurity is completely disabled and does not process any traffic.
#   - DetectionOnly: ModSecurity will inspect all traffic and log rule violations but will
#         not block or reject any requests. This mode is useful for testing and monitoring,
#         allowing you to observe how rules interact with traffic without interrupting 
#         normal operations. Itâ€™s ideal for tuning configurations before enforcing stricter 
#         blocking policies.
SecRuleEngine On

# Enables processing of the request body, allowing ModSecurity to inspect the content of 
# incoming requests. Essential for detecting malicious payloads within POST data.
SecRequestBodyAccess On

# =========================================================================================
# 2. Request Body Handling
# =========================================================================================

# Sets the maximum allowable size for the entire request body (including files) that
# ModSecurity will process. Requests exceeding this size will be truncated or rejected 
# based on the configured action.
SecRequestBodyLimit 16777216

# Specifies the maximum size of the request body that ModSecurity will process when no 
# files are included in the request. Ideal for limiting payloads for non-file uploads.
SecRequestBodyNoFilesLimit 16777216

# Defines the maximum amount of memory ModSecurity can use to store the request body. 
# Any data exceeding this limit will be written to disk as temporary files.
SecRequestBodyInMemoryLimit 16777216

# Determines the action ModSecurity should take if the request body size exceeds the 
# specified limits. The typical action is "Reject," meaning the request will be denied.
SecRequestBodyLimitAction Reject

# =========================================================================================
# 3. Response Body Handling
# =========================================================================================

# Enables or disables the inspection of response bodies. Disabled by default to enhance 
# performance, as it's less common to inspect response data.
SecResponseBodyAccess Off

# Defines the separator character for query string arguments. Default is '&', consistent
# with standard URL query string formatting.
SecArgumentSeparator &

# Sets the cookie format version. "0" is the default, which means the standard format will 
# be used.
SecCookieFormat 0

# =========================================================================================
# 4. File and Directory Settings
# =========================================================================================

# Specifies the directory where temporary files will be stored when request bodies exceed
# the in-memory limit.
SecTmpDir /opt/modsecurity/var/tmp/

# Defines the directory where ModSecurity's persistent data will be stored, such as 
# internal data used by rules and configurations.
SecDataDir /opt/modsecurity/var/data/

# =========================================================================================
# 5. Debugging Settings
# =========================================================================================

# Path to the debug log file, where detailed debugging information will be stored. 
# Essential for troubleshooting ModSecurity behavior and rule execution.
SecDebugLog /opt/modsecurity/var/log/debug.log

# Sets the debug logging level (0-9), with 0 meaning no debugging information and 9 
# providing maximum detail. Levels above 0 should be used with caution in production.
#SecDebugLogLevel 0
SecDebugLogLevel 2

# =========================================================================================
# 6. Audit Logging Configuration
# =========================================================================================

# Controls the audit logging engine:
#   - Off: Disables audit logging.
#   - On: Enables audit logging for all transactions.
#   - RelevantOnly: Logs only transactions that meet certain criteria (default).
SecAuditEngine RelevantOnly

# Specifies the HTTP response status codes that should trigger audit logging. 
# Example: "^(?:5|4(?!04))" means all 5xx and 4xx status codes except 404.
SecAuditLogRelevantStatus "^(?:5|4(?!04))"

# Defines which parts of the transaction should be logged in the audit log file.
# Example: ABCIJDEFHZ captures most aspects of a request and response.
SecAuditLogParts ABCIJDEFHZ

# Determines how audit log entries are written:
#   - Serial: Logs are written sequentially to a single file.
#   - Concurrent: Each transaction creates its own file in a specified directory.
SecAuditLogType Serial

# Sets the file path for storing audit logs.
SecAuditLog /opt/modsecurity/var/log/audit.log

# When using concurrent logging, this specifies the directory where individual logs will be stored.
SecAuditLogStorageDir /opt/modsecurity/var/audit/

# =========================================================================================
# 7. Default Rule Matching Policy
# =========================================================================================

# Specifies the default action for rule matches during phase 1. By default, logs the 
# incident, writes to the audit log, and passes the request through.
SecDefaultAction "phase:1,log,auditlog,pass"

# =========================================================================================
# 8. Request Body Processing Verification Rules
# =========================================================================================

# Ensures the request body is processed correctly. If an error occurs, ModSecurity will 
# log the incident and block the request.
SecRule REQBODY_PROCESSOR_ERROR "!@eq 0" \
    "id:1001,phase:2,t:none,log,block,msg:'Failed to parse request body: %{REQBODY_PROCESSOR_ERROR_MSG}'"

# Enforces strict validation of multipart/form-data requests. Logs and blocks requests 
# that do not adhere to the expected format, helping prevent certain types of attacks.
SecRule MULTIPART_STRICT_ERROR "!@eq 0" \
    "id:1002,phase:2,t:none,log,block,msg:'Multipart request body failed strict validation: \
    PE %{REQBODY_PROCESSOR_ERROR}, \
    BQ %{MULTIPART_BOUNDARY_QUOTED}, \
    BW %{MULTIPART_BOUNDARY_WHITESPACE}, \
    DB %{MULTIPART_DATA_BEFORE}, \
    DA %{MULTIPART_DATA_AFTER}, \
    HF %{MULTIPART_HEADER_FOLDING}, \
    LF %{MULTIPART_LF_LINE}, \
    SM %{MULTIPART_MISSING_SEMICOLON}, \
    IQ %{MULTIPART_INVALID_QUOTING}, \
    IF %{MULTIPART_INVALID_HEADER_FOLDING}, \
    FE %{MULTIPART_FILE_LIMIT_EXCEEDED}'"

# =========================================================================================
# 9. PCRE (Perl-Compatible Regular Expression) Limits
# =========================================================================================

# Sets the maximum number of calls to the PCRE match function during processing, helping 
# to prevent potential denial-of-service attacks from overly complex expressions.
SecPcreMatchLimit 100000

# Specifies the maximum recursion depth allowed in PCRE match processing.
SecPcreMatchLimitRecursion 100000

# Logs a message when the PCRE limits are exceeded, indicating potential malicious activity.
SecRule TX:MSC_PCRE_LIMITS_EXCEEDED "@eq 1" \
    "id:1003,phase:5,t:none,log,pass,msg:'PCRE limits exceeded'"

# =========================================================================================
#                                 End of Configuration
# =========================================================================================

